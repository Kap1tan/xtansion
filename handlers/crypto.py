"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –±–æ—Ç–∞ –∫–ª—É–±–∞ X10.
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from config import Config
from keyboards import main_menu_kb, crypto_assets_kb, payment_confirmation_kb
from utils import get_user_name, get_payment_description, parse_callback_data

router = Router()
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class CryptoPaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π"""
    payment_confirmation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)


# –ò—Å–ø–æ–ª—å–∑—É–µ–º F –≤–º–µ—Å—Ç–æ Text - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ aiogram
@router.callback_query(F.data.startswith("pay_method:") & F.data.endswith(":crypto"))
async def callback_pay_method_crypto(callback: CallbackQuery, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
    """
    print(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ crypto —Å callback_data: {callback.data}")
    callback_data = parse_callback_data(callback.data)
    product_type = callback_data.get("product")

    if not product_type:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return


    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    allowed_assets = ["BTC", "ETH"]  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=crypto_assets_kb(product_type, allowed_assets)
    )
    await callback.answer()


# –¢–∞–∫–∂–µ –∏–∑–º–µ–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è lambda –≤–º–µ—Å—Ç–æ Text
@router.callback_query(lambda c: c.data and c.data.startswith("crypto_asset:"))
async def callback_crypto_asset(callback: CallbackQuery, bot: Bot, db: Database, config: Config, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    """
    logger.info(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å callback_data: {callback.data}")

    user_id = callback.from_user.id

    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    parts = callback.data.split(':')
    product_type = parts[1] if len(parts) > 1 else None
    asset = parts[2] if len(parts) > 2 else None

    if not product_type or not asset:
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        payment_info = get_payment_description(product_type, config)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–∞—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        crypto_wallets = {
            "BTC": "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh",
            "ETH": "UQBz-nJfosXtTmW_2bG1-CvIw_B8TLCfylmRsgqmBWtO4zfr",
            "USDT": "0x8C99B0215379AB3FCc2A01743AF2D539FE783140"  # ERC-20
        }

        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –±–∏—Ä–∂–∏)
        crypto_rates = {
            "BTC": 60000,   # 1 BTC = 60000 USD
            "ETH": 30000,       # 1 TON = 5 USD
            "USDT": 1       # 1 USDT = 1 USD
        }

        # –ö—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        rub_to_usd = 1 / 75.0

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        amount_usd = payment_info["amount"] * rub_to_usd
        amount_crypto = amount_usd / crypto_rates[asset]

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        amount_crypto_str = "{:.6f}".format(amount_crypto)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        payment_id = await db.create_payment(
            user_id,
            payment_info["amount"],
            product_type,
            f"crypto:{asset}"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        crypto_message = (
            f"üí∞ –û–ø–ª–∞—Ç–∞ {payment_info['name']} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π {asset}\n\n"
            f"–°—É–º–º–∞: {amount_crypto_str} {asset}\n"
            f"–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: `{crypto_wallets[asset]}`\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:\n"
            f"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É {amount_crypto_str} {asset} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n"
            f"2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n"
            f"4. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –¢–û–ß–ù–£–Æ —Å—É–º–º—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ."
        )

        await callback.message.edit_text(
            crypto_message,
            reply_markup=payment_confirmation_kb(payment_id),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=main_menu_kb()
        )

    await callback.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("confirm_payment:"))
async def callback_confirm_crypto_payment(callback: CallbackQuery, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
    """
    payment_id = int(callback.data.split(':')[1])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        await callback.message.edit_text(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    payment_method = payment.get('payment_method', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂
    if not payment_method.startswith('crypto:'):
        await callback.message.edit_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await callback.answer()
        return

    # –î–ª—è –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–µ–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await state.set_state(CryptoPaymentStates.payment_confirmation)
    await state.update_data(payment_id=payment_id)

    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂."
    )

    await callback.answer()


@router.message(CryptoPaymentStates.payment_confirmation)
async def process_crypto_payment_confirmation(message: Message, state: FSMContext, db: Database, config: Config):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
    """
    data = await state.get_data()
    payment_id = data.get('payment_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if not message.photo and not message.document:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=need_help_kb()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        await message.answer(
            "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=main_menu_kb()
        )
        await state.clear()
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç—É.\n"
        "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
        reply_markup=main_menu_kb()
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ payment_method
    payment_method = payment.get('payment_method', '')
    crypto_type = payment_method.split(':')[1] if ':' in payment_method else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    for admin_id in config.bot.admin_ids:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            caption = (
                f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({get_user_name(message.from_user)})\n"
                f"–ü–ª–∞—Ç–µ–∂ ID: {payment_id}\n"
                f"–ü—Ä–æ–¥—É–∫—Ç: {payment.get('product_type')}\n"
                f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_type}\n"
                f"–°—É–º–º–∞: {payment.get('amount')} —Ä—É–±–ª–µ–π\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /confirm_payment {payment_id}"
            )

            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if message.photo:
                await message.bot.send_photo(
                    chat_id=admin_id,
                    photo=message.photo[-1].file_id,
                    caption=caption
                )
            elif message.document:
                await message.bot.send_document(
                    chat_id=admin_id,
                    document=message.document.file_id,
                    caption=caption
                )

            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
@router.message(Command("crypto_payments"))
async def cmd_crypto_payments(message: Message, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments
    conn = await db.get_conn()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º row_factory –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        conn.row_factory = lambda cursor, row: {col[0]: row[idx] for idx, col in enumerate(cursor.description)}
        cursor = await conn.execute(
            """
            SELECT p.payment_id, p.user_id, u.username, u.first_name, p.product_type, 
                  p.amount, p.payment_method, p.created_at
            FROM payments p
            LEFT JOIN users u ON p.user_id = u.user_id
            WHERE p.status = 'pending' AND p.payment_method LIKE 'crypto:%'
            ORDER BY p.created_at DESC
            """
        )
        payments = await cursor.fetchall()
    finally:
        await conn.close()

    if not payments:
        await message.answer("üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
    payments_text = "üìù –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π:\n\n"

    for payment in payments:
        payment_id = payment['payment_id']
        user_id = payment['user_id']
        username = payment.get('username') or payment.get('first_name') or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        crypto_type = payment['payment_method'].split(':')[1] if ':' in payment['payment_method'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        amount = payment['amount']
        product_type = payment['product_type']
        created_at = payment['created_at']

        payments_text += (
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
            f"üõí –ü—Ä–æ–¥—É–∫—Ç: {product_type}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π\n"
            f"ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_type}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
            f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /confirm_payment {payment_id}\n\n"
        )

    await message.answer(payments_text)


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from keyboards import need_help_kb