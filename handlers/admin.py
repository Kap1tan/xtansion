"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ –∫–ª—É–±–∞ X10.
"""
import logging
import asyncio
import sqlite3
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from config import Config
from keyboards import main_menu_kb, club_access_kb
from utils import get_user_name, get_payment_description

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("admin"))
async def cmd_admin(message: Message, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –í—ã–≤–æ–¥–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    admin_text = (
        f"üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å üîë\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/confirm_payment [ID –ø–ª–∞—Ç–µ–∂–∞] - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n"
        f"/payments_list - —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        f"/user_info [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        f"/broadcast - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        f"/export_users - –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    await message.answer(admin_text)


@router.message(Command("confirm_payment"))
async def cmd_confirm_payment(message: Message, bot: Bot, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    –§–æ—Ä–º–∞—Ç: /confirm_payment ID_–ø–ª–∞—Ç–µ–∂–∞
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm_payment ID_–ø–ª–∞—Ç–µ–∂–∞")
        return

    try:
        payment_id = int(args[1])
    except ValueError:
        await message.answer("ID –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)

    if not payment:
        await message.answer(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if payment.get('status') == 'confirmed':
        await message.answer(f"‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await db.confirm_payment(payment_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–µ
    customer_id = payment.get('user_id')
    product_type = payment.get('product_type')
    payment_method = payment.get('payment_method')
    amount = payment.get('amount')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = await db.get_user(customer_id)
    user_name = get_user_name(user_data) if user_data else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {customer_id}"

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    if product_type == "club":
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü
        payment_info = get_payment_description(product_type, config)
        await db.add_subscription(customer_id, payment_info["days"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                customer_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
                "–î–æ—Å—Ç—É–ø –∫ –∫–ª—É–±—É X10 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–ª—É–±—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=club_access_kb()
            )
            confirm_status = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {customer_id}: {e}")
            confirm_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"

    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
        try:
            await bot.send_message(
                customer_id,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞ {product_type} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n\n"
                f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            confirm_status = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {customer_id}: {e}")
            confirm_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_confirm_text = (
        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å ID {payment_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {customer_id})\n"
        f"üõí –ü—Ä–æ–¥—É–∫—Ç: {product_type}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n\n"
        f"{confirm_status}"
    )

    await message.answer(admin_confirm_text)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {customer_id}")


@router.message(Command("payments_list"))
async def cmd_payments_list(message: Message, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    try:
        conn.row_factory = sqlite3.Row
        cursor = await conn.execute(
            """
            SELECT p.payment_id, p.user_id, u.username, u.first_name, p.product_type, p.amount, p.payment_method, p.created_at
            FROM payments p
            LEFT JOIN users u ON p.user_id = u.user_id
            WHERE p.status = 'pending'
            ORDER BY p.created_at DESC
            LIMIT 15
            """
        )
        payments = await cursor.fetchall()
    finally:
        await conn.close()

    if not payments:
        await message.answer("üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
    payments_text = "üìù –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"

    for payment in payments:
        payment_id = payment['payment_id']
        user_id = payment['user_id']
        username = payment['username'] or payment['first_name'] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        product_type = payment['product_type']
        amount = payment['amount']
        payment_method = payment['payment_method']
        created_at = payment['created_at']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        is_crypto = payment_method.startswith('crypto:')
        payment_method_display = f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ({payment_method.split(':')[1]})" if is_crypto else payment_method

        payments_text += (
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
            f"üõí –ü—Ä–æ–¥—É–∫—Ç: {product_type}\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π\n"
            f"üí≥ –ú–µ—Ç–æ–¥: {payment_method_display}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
            f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: /confirm_payment {payment_id}\n\n"
        )

    await message.answer(payments_text)


@router.message(Command("user_info"))
async def cmd_user_info(message: Message, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    –§–æ—Ä–º–∞—Ç: /user_info ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    admin_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user_info ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(user_id)

    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = await db.check_subscription(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    referrals = await db.get_user_referrals(user_id)
    referrer = await db.get_user_referrer(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info_text = (
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"ID: {user_id}\n"
        f"Username: {user.get('username') or '–ù–µ—Ç'}\n"
        f"–ò–º—è: {user.get('first_name') or '–ù–µ—Ç'}\n"
        f"–§–∞–º–∏–ª–∏—è: {user.get('last_name') or '–ù–µ—Ç'}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.get('balance') or 0} –±–∞–ª–ª–æ–≤\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.get('registration_date') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    if subscription:
        from datetime import datetime
        end_date = subscription.get('end_date')
        if end_date:
            end_date_obj = datetime.fromisoformat(end_date.replace('Z', '+00:00'))
            days_left = (end_date_obj - datetime.now()).days
            user_info_text += (
                f"\nüì¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ê–∫—Ç–∏–≤–Ω–∞\n"
                f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
            )
    else:
        user_info_text += "\nüì¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    user_info_text += f"\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrals)}\n"

    if referrer:
        referrer_username = referrer.get('username') or referrer.get('first_name') or f"ID: {referrer.get('user_id')}"
        user_info_text += f"üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {referrer_username}\n"

    await message.answer(user_info_text)


@router.message(Command("stats"))
async def cmd_stats(message: Message, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM subscriptions WHERE status = 'active' AND end_date > datetime('now')"
        )
        active_subscriptions = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor = await conn.execute("SELECT COUNT(*) FROM payments")
        total_payments = (await cursor.fetchone())[0]

        # –°—É–º–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        cursor = await conn.execute(
            "SELECT SUM(amount) FROM payments WHERE status = 'confirmed'"
        )
        total_revenue = (await cursor.fetchone())[0] or 0

        # –ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM payments WHERE created_at > datetime('now', '-7 days')"
        )
        recent_payments = (await cursor.fetchone())[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        cursor = await conn.execute("SELECT COUNT(*) FROM referrals")
        total_referrals = (await cursor.fetchone())[0]
    finally:
        await conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –∫–ª—É–±–∞ X10:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subscriptions}\n"
        f"üí∞ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
        f"üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} —Ä—É–±.\n"
        f"üìà –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ 7 –¥–Ω–µ–π: {recent_payments}\n"
        f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
    )

    await message.answer(stats_text)


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BroadcastStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    waiting_for_message = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    confirmation = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏


import os
import csv
import io
from aiogram.types import BufferedInputFile
from datetime import datetime


@router.message(Command("export_users"))
async def cmd_export_users(message: Message, db: Database, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV-—Ñ–∞–π–ª
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    try:
        conn.row_factory = sqlite3.Row
        cursor = await conn.execute(
            """
            SELECT u.user_id, u.username, u.first_name, u.last_name, u.registration_date, u.balance,
                   (SELECT COUNT(*) FROM referrals r WHERE r.referrer_id = u.user_id) as referrals_count,
                   (CASE WHEN EXISTS (
                       SELECT 1 FROM subscriptions s 
                       WHERE s.user_id = u.user_id AND s.status = 'active' AND s.end_date > datetime('now')
                   ) THEN '–ê–∫—Ç–∏–≤–Ω–∞' ELSE '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞' END) as subscription_status
            FROM users u
            ORDER BY u.registration_date DESC
            """
        )
        users = await cursor.fetchall()
    finally:
        await conn.close()

    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
    output = io.StringIO()
    fieldnames = ['ID', 'Username', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ë–∞–ª–∞–Ω—Å', '–†–µ—Ñ–µ—Ä–∞–ª—ã', '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏']
    writer = csv.DictWriter(output, fieldnames=fieldnames)
    writer.writeheader()

    for user in users:
        writer.writerow({
            'ID': user['user_id'],
            'Username': user['username'] or '–ù–µ—Ç',
            '–ò–º—è': user['first_name'] or '–ù–µ—Ç',
            '–§–∞–º–∏–ª–∏—è': user['last_name'] or '–ù–µ—Ç',
            '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': user['registration_date'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            '–ë–∞–ª–∞–Ω—Å': user['balance'] or 0,
            '–†–µ—Ñ–µ—Ä–∞–ª—ã': user['referrals_count'],
            '–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏': user['subscription_status']
        })

    # –ì–æ—Ç–æ–≤–∏–º CSV-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    csv_bytes = output.getvalue().encode('utf-8-sig')  # UTF-8 —Å BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
    current_date = datetime.now().strftime("%Y-%m-%d")
    file_name = f"club_x10_users_{current_date}.csv"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    input_file = BufferedInputFile(csv_bytes, filename=file_name)
    await message.answer_document(
        document=input_file,
        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)})"
    )


@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext, config: Config):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in config.bot.admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.set_state(BroadcastStates.waiting_for_message)

    await message.answer(
        "üì£ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- –¢–µ–∫—Å—Ç\n"
        "- –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "- –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "- –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )


@router.message(Command("cancel"), BroadcastStates)
async def cmd_cancel_broadcast(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.message(BroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–Ω—Ç–µ–Ω—Ç
    if not (message.text or message.photo or message.video or message.document):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    await state.update_data(
        message_type="text" if message.text else
        "photo" if message.photo else
        "video" if message.video else
        "document" if message.document else "unknown",
        message_text=message.text if message.text else message.caption or "",
        photo_id=message.photo[-1].file_id if message.photo else None,
        video_id=message.video.file_id if message.video else None,
        document_id=message.document.file_id if message.document else None
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(BroadcastStates.confirmation)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    content_type = (
        "–¢–µ–∫—Å—Ç" if message.text else
        "–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é" if message.photo else
        "–í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é" if message.video else
        "–î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é" if message.document else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    )

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    await message.answer(
        f"üì£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        f"–¢–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_type}\n"
        f"–¢–µ–∫—Å—Ç: {message.text or message.caption or '–ù–µ—Ç'}\n\n"
        f"–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_broadcast")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
        ])
    )


@router.callback_query(F.data == "cancel_broadcast", BroadcastStates.confirmation)
async def callback_cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ callback
    """
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data == "confirm_broadcast", BroadcastStates.confirmation)
async def callback_confirm_broadcast(callback: CallbackQuery, state: FSMContext, bot: Bot, db: Database):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    data = await state.get_data()
    message_type = data.get("message_type")
    message_text = data.get("message_text", "")
    photo_id = data.get("photo_id")
    video_id = data.get("video_id")
    document_id = data.get("document_id")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    status_message = await callback.message.edit_text("–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É... ‚è≥")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    try:
        conn.row_factory = sqlite3.Row
        cursor = await conn.execute("SELECT user_id FROM users WHERE 1=1")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        users = await cursor.fetchall()
    finally:
        await conn.close()

    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    success_count = 0
    error_count = 0
    total_users = len(users)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    update_interval = 10

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    for i, user in enumerate(users, 1):
        user_id = user["user_id"]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message_type == "text":
                await bot.send_message(user_id, message_text)
            elif message_type == "photo":
                await bot.send_photo(user_id, photo_id, caption=message_text)
            elif message_type == "video":
                await bot.send_video(user_id, video_id, caption=message_text)
            elif message_type == "document":
                await bot.send_document(user_id, document_id, caption=message_text)

            success_count += 1
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ update_interval –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
        if i % update_interval == 0 or i == total_users:
            try:
                await status_message.edit_text(
                    f"–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... ‚è≥\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_users} ({int(i / total_users * 100)}%)\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"–û—à–∏–±–æ–∫: {error_count}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API Telegram
        await asyncio.sleep(0.05)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    final_status = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫: {error_count}\n"
        f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {int(success_count / total_users * 100 if total_users else 0)}%"
    )

    await status_message.edit_text(final_status)
    await callback.answer()


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton